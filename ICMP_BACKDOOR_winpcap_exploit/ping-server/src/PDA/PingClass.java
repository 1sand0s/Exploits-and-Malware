package PDA;



import java.io.IOException;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.pcap4j.core.BpfProgram.BpfCompileMode;
import org.pcap4j.core.NotOpenException;
import org.pcap4j.core.PacketListener;
import org.pcap4j.core.PcapHandle;
import org.pcap4j.core.PcapNativeException;
import org.pcap4j.core.PcapNetworkInterface;
import org.pcap4j.core.PcapNetworkInterface.PromiscuousMode;
import org.pcap4j.core.Pcaps;
import org.pcap4j.packet.ArpPacket;
import org.pcap4j.packet.EthernetPacket;
import org.pcap4j.packet.IcmpV4CommonPacket;
import org.pcap4j.packet.IcmpV4DestinationUnreachablePacket;
import org.pcap4j.packet.IcmpV4EchoPacket;
import org.pcap4j.packet.IcmpV4EchoReplyPacket;
import org.pcap4j.packet.IcmpV4RedirectPacket;
import org.pcap4j.packet.IcmpV4TimestampPacket;
import org.pcap4j.packet.IcmpV4TimestampPacket.Builder;
import org.pcap4j.packet.IpV4Packet;
import org.pcap4j.packet.IpV4Rfc791Tos;
import org.pcap4j.packet.Packet;
import org.pcap4j.packet.UnknownPacket;
import org.pcap4j.packet.namednumber.ArpHardwareType;
import org.pcap4j.packet.namednumber.ArpOperation;
import org.pcap4j.packet.namednumber.EtherType;
import org.pcap4j.packet.namednumber.IcmpV4Code;
import org.pcap4j.packet.namednumber.IcmpV4Type;
import org.pcap4j.packet.namednumber.IpNumber;
import org.pcap4j.packet.namednumber.IpVersion;
import org.pcap4j.util.ByteArrays;
import org.pcap4j.util.MacAddress;
import org.pcap4j.util.NifSelector;


public class PingClass
{

  private static final String COUNT_KEY= pda.class.getName() + ".count";
  private static final int COUNT= Integer.getInteger(COUNT_KEY, 1);
  private static final String READ_TIMEOUT_KEY = pda.class.getName() + ".readTimeout";
  private static final int READ_TIMEOUT= Integer.getInteger(READ_TIMEOUT_KEY, 10); // [ms]
  private static final String SNAPLEN_KEY= pda.class.getName() + ".snaplen";
  private static final int SNAPLEN = Integer.getInteger(SNAPLEN_KEY, 65536); // [bytes]
  private static final MacAddress SRC_MAC_ADDR= MacAddress.getByName(pda.srcMAC);
  private static MacAddress resolvedAddr;
  private static String recv_data;
  private static String ipv4_data;
  private static Packet pacp;
  private static String ACK;

  PingClass() throws IOException , PcapNativeException,NotOpenException
  {
    InetAddress dstt=InetAddress.getByName(pda.destIP);
    System.out.println(COUNT_KEY + ": " + COUNT);
    System.out.println(READ_TIMEOUT_KEY + ": " + READ_TIMEOUT);
    System.out.println(SNAPLEN_KEY + ": " + SNAPLEN);
    System.out.println("\n");


    
   
   PcapHandle sendHandle = pda.nif.openLive(SNAPLEN, PromiscuousMode.PROMISCUOUS, READ_TIMEOUT);
  try{
      UnknownPacket.Builder unknownb = new UnknownPacket.Builder();
      unknownb.rawData(pda.raw1);

      IcmpV4EchoPacket.Builder pppp=new IcmpV4EchoPacket.Builder();
     // IcmpV4DestinationUnreachablePacket.Builder pppp=new IcmpV4DestinationUnreachablePacket.Builder();
      pppp.payloadBuilder(unknownb);
      IcmpV4CommonPacket.Builder pac =new IcmpV4CommonPacket.Builder();
   
    	  pac
    	  .code(IcmpV4Code.NO_CODE)
    	  .type(IcmpV4Type.ECHO)
    	  .correctChecksumAtBuild(true)
    	  
    	  .payloadBuilder(pppp);
    	  
  
      IpV4Packet.Builder pp=new IpV4Packet.Builder();
      pp
      .correctChecksumAtBuild(true)
      .dstAddr((Inet4Address) dstt)
      .srcAddr((Inet4Address)InetAddress.getByName(pda.srcIP))
      .payloadBuilder(pac)
      .version(IpVersion.IPV4)
      
         .tos(IpV4Rfc791Tos.newInstance((byte)0))
         .identification((short)100)
         .ttl((byte)100)
         .protocol(IpNumber.ICMPV4)
         .correctLengthAtBuild(true);
         
      EthernetPacket.Builder etherBuilder = new EthernetPacket.Builder();
      etherBuilder.dstAddr(MacAddress.getByName("")) //Enter MAC address of your gateway inside quotes
                  .srcAddr(SRC_MAC_ADDR)
                  .type(EtherType.IPV4)
                  
         
                  .payloadBuilder(pp)
                  .paddingAtBuild(true);

      for (int i = 0; i < COUNT; i++) {
        Packet p = etherBuilder.build();
        System.out.println(p);
        sendHandle.sendPacket(p);
        try {
          Thread.sleep(1000);
        } catch (InterruptedException e) {
          break;
        }
      }
    } finally {
     
      if (sendHandle != null && sendHandle.isOpen()) {
        sendHandle.close();
      }
   
    }
  }
  

}
