package PingVic;

import java.io.IOException;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.pcap4j.core.BpfProgram.BpfCompileMode;
import org.pcap4j.core.NotOpenException;
import org.pcap4j.core.PacketListener;
import org.pcap4j.core.PcapHandle;
import org.pcap4j.core.PcapNativeException;
import org.pcap4j.core.PcapNetworkInterface;
import org.pcap4j.core.PcapNetworkInterface.PromiscuousMode;
import org.pcap4j.core.Pcaps;
import org.pcap4j.packet.ArpPacket;
import org.pcap4j.packet.EthernetPacket;
import org.pcap4j.packet.IcmpV4CommonPacket;
import org.pcap4j.packet.IcmpV4EchoPacket;
import org.pcap4j.packet.IcmpV4RedirectPacket;
import org.pcap4j.packet.IcmpV4TimestampPacket;
import org.pcap4j.packet.IcmpV4TimestampPacket.Builder;
import org.pcap4j.packet.IpV4Packet;
import org.pcap4j.packet.IpV4Rfc791Tos;
import org.pcap4j.packet.Packet;
import org.pcap4j.packet.UnknownPacket;
import org.pcap4j.packet.namednumber.ArpHardwareType;
import org.pcap4j.packet.namednumber.ArpOperation;
import org.pcap4j.packet.namednumber.EtherType;
import org.pcap4j.packet.namednumber.IcmpV4Code;
import org.pcap4j.packet.namednumber.IcmpV4Type;
import org.pcap4j.packet.namednumber.IpNumber;
import org.pcap4j.packet.namednumber.IpVersion;
import org.pcap4j.util.ByteArrays;
import org.pcap4j.util.MacAddress;
import org.pcap4j.util.NifSelector;

public class src_ip extends NifSelector
{
	protected static PcapNetworkInterface nic;
	private static src_ip ob;
	private static String in;
	private static final String COUNT_KEY= pivic.class.getName() + ".count";
    private static final int COUNT= Integer.getInteger(COUNT_KEY, 1);
    private static final String READ_TIMEOUT_KEY= pivic.class.getName() + ".readTimeout";
	private static final int READ_TIMEOUT= Integer.getInteger(READ_TIMEOUT_KEY, 10); // [ms]
	private static final String SNAPLEN_KEY= pivic.class.getName() + ".snaplen";
	private static final int SNAPLEN = Integer.getInteger(SNAPLEN_KEY, 65536); // [bytes]
	protected static MacAddress resolvedAddr;
	private static Packet pcap;
	
	src_ip()
	{
		ob=this;
	
	}
	
	void Setup(String in_num) throws UnknownHostException, PcapNativeException, NotOpenException
	{
		
		in=in_num;
		try 
		{
			nic=ob.selectNetworkInterface();
		} 
		catch (IOException e)
		{
			
			e.printStackTrace();
		}
		String mac=nic.getLinkLayerAddresses().toString();
		mac=mac.substring(1,mac.length()-1);
		System.out.println(mac);
		System.out.println(nic.getAddresses().toString());
		pivic.SRC_MAC_ADDR=MacAddress.getByName(mac);
		String srcip=nic.getAddresses().toString();
		srcip=srcip.substring(srcip.lastIndexOf("address"),srcip.lastIndexOf("netmask"));
		System.out.println(srcip);
		srcip=srcip.substring(srcip.indexOf("/")+1,srcip.lastIndexOf("]"));
		System.out.println(srcip);
	    String strSrcIpAddress = srcip; // for InetAddress.getByName()
	    String strDstIpAddress = srcip.substring(0,srcip.lastIndexOf(".")+1)+"1"; // for InetAddress.getByName()
	    InetAddress dstt=InetAddress.getByName(strDstIpAddress);
	    System.out.println(COUNT_KEY + ": " + COUNT);
	    System.out.println(READ_TIMEOUT_KEY + ": " + READ_TIMEOUT);
	    System.out.println(SNAPLEN_KEY + ": " + SNAPLEN);
	    System.out.println("\n");

	  

	    

	   PcapHandle handle
	      = nic.openLive(SNAPLEN, PromiscuousMode.PROMISCUOUS, READ_TIMEOUT);
	    PcapHandle sendHandle
	      = nic.openLive(SNAPLEN, PromiscuousMode.PROMISCUOUS, READ_TIMEOUT);
	    ExecutorService pool = Executors.newSingleThreadExecutor();

	    try {
	    	
	  
	      handle.setFilter(
	        "arp and ether dst " + Pcaps.toBpfString(pivic.SRC_MAC_ADDR),
	        BpfCompileMode.OPTIMIZE
	      );
	      System.out.println(handle);
	      PacketListener listener
	        = new PacketListener() {
	            @Override
	            public void gotPacket(Packet packet) {
	            	//pcap=packet;
	              if (packet.contains(ArpPacket.class)) {
	                ArpPacket arp = packet.get(ArpPacket.class);
	                if (arp.getHeader().getOperation().equals(ArpOperation.REPLY)) {
	                  src_ip.resolvedAddr = arp.getHeader().getSrcHardwareAddr();
	                }
	              }
	            
	            }
	          };

	      Task t = new Task(handle, listener);
	      pool.execute(t);
	   
	     
	     ArpPacket.Builder arpBuilder = new ArpPacket.Builder();
	      try {
	        arpBuilder
	          .hardwareType(ArpHardwareType.ETHERNET)
	          .protocolType(EtherType.IPV4)
	          .hardwareAddrLength((byte)MacAddress.SIZE_IN_BYTES)
	          .protocolAddrLength((byte)ByteArrays.INET4_ADDRESS_SIZE_IN_BYTES)
	          .operation(ArpOperation.REQUEST)
	          .srcHardwareAddr(pivic.SRC_MAC_ADDR)
	          .srcProtocolAddr(InetAddress.getByName(strSrcIpAddress))
	          .dstHardwareAddr(MacAddress.ETHER_BROADCAST_ADDRESS)
	          .dstProtocolAddr(InetAddress.getByName(strDstIpAddress));
	      }catch (UnknownHostException e) {
	        throw new IllegalArgumentException(e);
	     }
	         
	      EthernetPacket.Builder etherBuilder = new EthernetPacket.Builder();
	      etherBuilder.dstAddr(MacAddress.ETHER_BROADCAST_ADDRESS)
	                  .srcAddr(pivic.SRC_MAC_ADDR)
	                  .type(EtherType.ARP)
	                  
	                .payloadBuilder(arpBuilder)
	                 
	                  .paddingAtBuild(true);

	      for (int i = 0; i < COUNT; i++) {
	        Packet p = etherBuilder.build();
	        System.out.println(p);
	        sendHandle.sendPacket(p);
	        try {
	          Thread.sleep(1000);
	        } catch (InterruptedException e) {
	          break;
	        }
	      }
	 
	    } finally {
	      if (handle != null && handle.isOpen()) {
	        handle.close();
	      }
	      if (sendHandle != null && sendHandle.isOpen()) {
	        sendHandle.close();
	      }
	      if (pool != null && !pool.isShutdown()) {
	        pool.shutdown();
	      }

	      System.out.println(strDstIpAddress + " was resolved to " + resolvedAddr);
	    }
	  }
	
	@Override
	protected String read()throws IOException
	{
		return in;
	}
	
	@Override
	protected void write(String h)
	{
		System.out.println(h);
	}

}	
class Task implements Runnable {

    protected PcapHandle handle;
    protected PacketListener listener;

    public Task(PcapHandle handle, PacketListener listener) {
      this.handle = handle;
      this.listener = listener;
    }

    @Override
    public void run() 
    {
      try 
      {
    	  new scheduler(1000,this).start();
    	 handle.loop(1, listener);
      } 
      catch (PcapNativeException e) 
      {
        e.printStackTrace();
      } 
      catch (InterruptedException e) 
      {
        e.printStackTrace();
      }
      catch (NotOpenException e) 
      {
        e.printStackTrace();
      } 
      
    }

  }

class TimeoutException extends Exception
{
	public TimeoutException()
	{
		System.out.println("Timeout");
	}
}


